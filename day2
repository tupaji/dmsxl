 977.有序数组的平方 

双指针从两边找较大值，依次对比填入新的vector并返回

题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/
文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        vector<int> result(nums.size(), 0);
        for (int i=nums.size()-1; i>=0; i--) {
            if (abs(nums[left]) < abs(nums[right])) {
                result[i] = nums[right] * nums[right];
                right--;
            } else {
                result[i] = nums[left] * nums[left];
                left++;
            }
        }
        return result;

    }
};

 209.长度最小的子数组

滑动窗口少增多删并记录最小满足条件的值

题目链接：https://leetcode.cn/problems/minimum-size-subarray-sum/
文章讲解：https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int sum = 0;
        int left = 0, right = 0;
        int result = nums.size() + 1;

        for (int i:nums) {
            sum += i;
        }
        if (sum < target) {
            return 0;
        }
        sum = 0;
        while (right < nums.size()) {
            sum += nums[right];
            while (sum >= target) {
                int len = right - left + 1;
                if (len < result) result = len;
                sum -= nums[left];
                left++;
            }
            right++;
        }
        return result;
    }
};

 59.螺旋矩阵II

注重区间避免重复，可以画图便于理解

题目链接：https://leetcode.cn/problems/spiral-matrix-ii/
文章讲解：https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html

class Solution {
public:
    void printnum(int num) {
        cout << num;
    }
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> result(n, vector<int>(n, 0));
        int num = 1;
        int x=0, y=0;
        int offset = 1;
        for(int i=n/2; i>=0; i--) {
            
            int j = offset - 1,k = offset - 1;
            
            for (j; j<n-offset ;j++) {
                result[k][j] = num++;
            }
            for (k; k<n-offset ;k++) {
                result[k][j] = num++;
            }
            for (; j>offset - 1 ;j--) {
                result[k][j] = num++;
            }
            for (; k>offset - 1 ;k--) {
                result[k][j] = num++;
            }
            offset++;
        }
        if (n%2 == 1) {
            result[n/2][n/2] = num;
        }
        return result;
    }
};
